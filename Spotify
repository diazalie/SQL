# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

# 1. Artist track & Performance: Are there specific artists that dominate certain musical attributes (e.g., high danceability, energy, or acousticness)?
SELECT
    artist_name,
    AVG(danceability) AS avg_danceability,
    AVG(energy) AS avg_energy,
    AVG(acousticness) AS avg_acousticness
FROM
    BIT_DB.Spotifydata
GROUP BY
    artist_name
ORDER BY
    avg_danceability DESC,  -- You can switch this to another attribute for different focus
    avg_energy DESC,
    avg_acousticness DESC
;

# 2. Artist track & Performance: Average popularity, danceability, and energy by artist and track.
SELECT artist_name,
       track_name,
       avg(popularity),
       avg(danceability),
       avg(energy) 
  FROM BIT_DB.spotifydata
 GROUP BY artist_name,
          track_name
;

# 3. Artist track & Performance: Which artists have the most popular tracks (highest popularity scores)?
SELECT artist_name
,track_name
,popularity
FROM
    Spotifydata
ORDER BY popularity DESC
LIMIT 10
;

# 4. What artist released the longest song?
SELECT artist_name,
       MAX(duration_ms) 
  FROM BIT_DB.spotifyData
 ORDER BY duration_ms DESC
 ;

# 5. What's the average danceability for the 10 most popular songs?
SELECT track_name,
       AVG(danceability) AS avg_danceability
  FROM BIT_DB.spotifyData
 GROUP BY track_name
 ORDER BY danceability DESC
 LIMIT 10
;

# 6. Song Structure and Musicality: What is the distribution of time signatures and song keys across the dataset?
SELECT
    ROUND(popularity / 10) * 10 AS popularity_range,  -- Group popularity into ranges of 10
    AVG(danceability) AS avg_danceability,
    AVG(energy) AS avg_energy,
    AVG(tempo) AS avg_tempo
FROM
    Spotifydata
GROUP BY
    popularity_range
ORDER BY
    popularity_range
;
